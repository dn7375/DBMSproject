<div class="page-container">
  <header class="header">
    <nav class="nav-container">
      <a href="/employee/dashboard" class="nav-link">Dashboard</a>
      <a href="/employee/products-manage" class="nav-link active">Products</a>
      <a href="/employee/orders" class="nav-link">Orders</a>
      <a href="/employee/users" class="nav-link">Users</a>
      <a href="/employee/suppliers" class="nav-link">Suppliers</a>
      <a href="/employee/warehouses" class="nav-link">Warehouses</a>
      <a href="/employee/returns" class="nav-link">Returns</a>
      <a href="/employee/reviews" class="nav-link">Reviews</a>
      <a href="/logout" class="nav-link">Log Out</a>
    </nav>
  </header>

  <main class="main-content">
    <!-- Product List Section -->
    <div class="card mb-4">
      <div class="card-header">
        <h2 class="card-title">Product Inventory</h2>
        <button class="btn btn-primary" id="addProductBtn">Add New Product</button>
      </div>
      
      <div class="table-container">
        <% if (typeof products !== 'undefined' && products.length > 0) { %>
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% products.forEach(function(product) { %>
                <tr>
                  <td><%= product.id %></td>
                  <td><%= product.name %></td>
                  <td><%= product.category || 'N/A' %></td>
                  <td>₹<%= (Number(product.price) || 0).toFixed(2) %></td>
                  <td><%= product.quantity || 0 %></td>
                  <td>
                    <button class="btn btn-secondary btn-sm edit-product" data-id="<%= product.id %>">Edit</button>
                    <button class="btn btn-danger btn-sm delete-product" data-id="<%= product.id %>">Delete</button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        <% } else { %>
          <p class="no-data">No products available</p>
        <% } %>
      </div>
    </div>

    <!-- Add/Edit Product Form -->
    <div class="card" id="productFormCard">
      <h2 class="card-title">Manage Product</h2>
      <form class="form-group" id="productForm" method="POST" enctype="multipart/form-data">
        <div class="form-row">
          <div class="form-col">
            <label class="form-label" for="name">Product Name</label>
            <input type="text" class="form-input" id="name" name="name" required
                   placeholder="Enter product name">
          </div>
          
          <div class="form-col">
            <label class="form-label" for="sku">SKU</label>
            <input type="text" class="form-input" id="sku" name="sku" required
                   placeholder="Enter SKU">
          </div>
        </div>

        <div class="form-row">
          <div class="form-col">
            <label class="form-label" for="price">Price (₹)</label>
            <input type="number" class="form-input" id="price" name="price" 
                   step="0.01" min="0" required
                   placeholder="0.00">
          </div>
          
          <div class="form-col">
            <label class="form-label" for="stock">Stock Quantity</label>
            <input type="number" class="form-input" id="stock" name="stock" 
                   min="0" required
                   placeholder="Enter quantity">
          </div>
        </div>

        <div class="form-row">
          <div class="form-col full-width">
            <label class="form-label" for="description">Description</label>
            <textarea class="form-input" id="description" name="description" 
                      rows="4" required
                      placeholder="Enter product description"></textarea>
          </div>
        </div>

        <div class="form-row">
          <div class="form-col">
            <label class="form-label" for="category">Category</label>
            <select class="form-input" id="category" name="category" required>
              <option value="">Select category</option>
              <option value="electronics">Electronics</option>
              <option value="clothing">Clothing</option>
              <option value="books">Books</option>
              <option value="home">Home & Living</option>
            </select>
          </div>
          
          <div class="form-col">
            <label class="form-label" for="supplier">Supplier</label>
            <select class="form-input" id="supplier" name="supplier" required>
              <option value="">Select supplier</option>
              <!-- Populate with actual suppliers -->
            </select>
          </div>
        </div>

        <div class="form-row">
          <div class="form-col full-width">
            <label class="form-label" for="image">Product Image</label>
            <input type="file" class="form-input" id="image" name="image" 
                   accept="image/*">
          </div>
        </div>

        <div class="form-actions">
          <button type="reset" class="btn btn-secondary">Reset</button>
          <button type="submit" class="btn btn-primary">Save Product</button>
        </div>
      </form>
    </div>
  </main>
</div>

<style>
  .mb-4 {
    margin-bottom: 1.5rem;
  }
  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }
  .btn-danger {
    background: var(--danger);
    color: white;
  }
  .btn-danger:hover {
    background: #d32f2f;
  }
  .no-data {
    padding: 1.5rem;
    text-align: center;
    color: var(--text-light);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const productForm = document.getElementById('productForm');
    const productFormCard = document.getElementById('productFormCard');
    const addProductBtn = document.getElementById('addProductBtn');
    const editButtons = document.querySelectorAll('.edit-product');
    const deleteButtons = document.querySelectorAll('.delete-product');
    
    // Form state
    let currentProductId = null;
    let isEditing = false;
    
    // Show/hide form
    function toggleForm(show) {
      productFormCard.style.display = show ? 'block' : 'none';
    }
    
    // Initially hide the form
    toggleForm(false);
    
    // Add new product button
    addProductBtn.addEventListener('click', function() {
      resetForm();
      isEditing = false;
      currentProductId = null;
      document.querySelector('#productFormCard h2').textContent = 'Add New Product';
      toggleForm(true);
    });
    
    // Reset form
    function resetForm() {
      productForm.reset();
      currentProductId = null;
    }
    
    // Edit product
    editButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const productId = this.getAttribute('data-id');
        currentProductId = productId;
        isEditing = true;
        
        try {
          // Fetch product details
          const response = await fetch(`/employee/api/products/${productId}`);
          if (!response.ok) throw new Error('Failed to fetch product');
          
          const product = await response.json();
          
          // Fill the form
          document.getElementById('name').value = product.NAME || '';
          document.getElementById('sku').value = product.SKU || '';
          document.getElementById('price').value = product.PRICE || '';
          document.getElementById('stock').value = product.QUANTITY || '';
          document.getElementById('description').value = product.DESCRIPTION || '';
          
          if (product.CATEGORY) {
            const categorySelect = document.getElementById('category');
            for (let i = 0; i < categorySelect.options.length; i++) {
              if (categorySelect.options[i].value === product.CATEGORY) {
                categorySelect.selectedIndex = i;
                break;
              }
            }
          }
          
          if (product.SUPPLIER_ID) {
            const supplierSelect = document.getElementById('supplier');
            for (let i = 0; i < supplierSelect.options.length; i++) {
              if (supplierSelect.options[i].value === product.SUPPLIER_ID.toString()) {
                supplierSelect.selectedIndex = i;
                break;
              }
            }
          }
          
          document.querySelector('#productFormCard h2').textContent = 'Edit Product';
          toggleForm(true);
          
        } catch (error) {
          console.error('Error fetching product:', error);
          alert('Failed to load product details');
        }
      });
    });
    
    // Delete product
    deleteButtons.forEach(button => {
      button.addEventListener('click', async function() {
        if (!confirm('Are you sure you want to delete this product?')) return;
        
        const productId = this.getAttribute('data-id');
        
        try {
          const response = await fetch(`/employee/api/products/${productId}`, {
            method: 'DELETE'
          });
          
          if (!response.ok) throw new Error('Failed to delete product');
          
          alert('Product deleted successfully');
          window.location.reload(); // Refresh the page
          
        } catch (error) {
          console.error('Error deleting product:', error);
          alert('Failed to delete product');
        }
      });
    });
    
    // Form submission
    productForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Get form data
      const formData = new FormData(productForm);
      const productData = {
        name: formData.get('name'),
        sku: formData.get('sku'),
        price: formData.get('price'),
        quantity: formData.get('stock'),
        description: formData.get('description'),
        category: formData.get('category'),
        supplierId: formData.get('supplier')
      };
      
      try {
        let url = '/employee/api/products';
        let method = 'POST';
        
        if (isEditing && currentProductId) {
          url = `/employee/api/products/${currentProductId}`;
          method = 'PUT';
        }
        
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(productData)
        });
        
        if (!response.ok) throw new Error('Failed to save product');
        
        alert(isEditing ? 'Product updated successfully' : 'Product added successfully');
        window.location.reload(); // Refresh the page
        
      } catch (error) {
        console.error('Error saving product:', error);
        alert('Failed to save product');
      }
    });
    
    // Load suppliers for dropdown
    async function loadSuppliers() {
      try {
        const response = await fetch('/employee/api/suppliers');
        if (!response.ok) throw new Error('Failed to fetch suppliers');
        
        const suppliers = await response.json();
        const supplierSelect = document.getElementById('supplier');
        
        // Clear existing options except the first one
        while (supplierSelect.options.length > 1) {
          supplierSelect.remove(1);
        }
        
        // Add supplier options
        suppliers.forEach(supplier => {
          const option = document.createElement('option');
          option.value = supplier.SUPPLIER_ID;
          option.textContent = supplier.NAME;
          supplierSelect.appendChild(option);
        });
        
      } catch (error) {
        console.error('Error loading suppliers:', error);
      }
    }
    
    // Load suppliers when page loads
    loadSuppliers();
  });
</script>